######################## AWS-de IAM-de user yaradiriq access_key ve secret_key generate edirik tereform ucun.

##################

provider "aws" {
region = "eu-west-3"
access_key = ""
secret_key = ""

}

resource "aws_vpc" "development-vpc" {
cidr_block = "10.0.0.0/16"

}

resource "aws_subnet" "dev-subnet-1" {
vpc_id = aws_vpc.development-vpc.id
cidr_block = "10.0.10.0/24"
availability_zone = "eu-west-3a"

}

data "aws_vpc" "existing_vpc" {
default = true

}

resource "aws_subnet" "dev-subnet-2" {
vpc_id = data.aws_vpc.existing_vpc.id
cidr_block = "172.31.48.0/20"
availability_zone = "eu-west-3a"

tags = {
Name: "devlopment-anar"
vpc_env: "dev"
}

}

### ####configi deyishenden sonra apply etmek

terraform apply

#################################

output “dev-vpc-id” {

value = aws_vpc.development

}

bu sadce yazdiqimiz outputda gorsedir

################################## **Configi dəyişmədən resource silmək CLİ ilə #####**

terraform destroy -target aws_subnet.dev-subnet-1

terraform apply —- configi qebul etmek 

terraform init —service ishe salmaq

terraform plan — yazilmish configin daxiline baxmaq

terraform apply -auto-aprove — loglari gostermeden apply etmek ve senden sorushmadan apply edir

terraform destroy — her sheyi silmek 

terraform state —-  subcommandlari gorsedir 

terraform state list — resource haqqinda melumat

terraform state show resource — yaradilan resource haqqinda melumat

########################## Variable vastesi ile config etmek ##########################

in main config main.tf

**variable “subnet_cidr_block”** {

description “subnet cidr network/mask(ex. 10.0.0.0/24)”

}

resource "aws_subnet" "dev-subnet-2" {
vpc_id = **data.aws_vpc.existing_vpc.id**
cidr_block = var.subnet_cidr_block
availability_zone = "eu-west-3a"

**with command line** 

terraform apply -var “**subnet_cidr_block=10.10.30.0/24**”

**Terraform.tfvars ile variable-leri onun daxilinde yaza bilerik** 

subnet_cidr_block = “**10.10.30.0/24**”

terraform apply -var-file terraform-dev.tfvars

##############################################################################

provider "aws" {}

variable cidr_blocks {
description = "cidr blocks and name tags for vpc and subnets"
type = list(object({
cidr_block = string
name = string
}))
}

variable avail_zone {}

resource "aws_vpc" "myapp-vpc" {
cidr_block = var.cidr_blocks[0].cidr_block
tags = {
Name: var.cidr_blocks[0].name
}
}

resource "aws_subnet" "myapp-subnet-1" {
vpc_id = aws_vpc.myapp-vpc.id
cidr_block = var.cidr_blocks[1].cidr_block
availability_zone = var.avail_zone
tags = {
Name: var.cidr_blocks[1].name
}
}

##################AWS-de VPC-ye elave etmek Route ve Internet Gateway elave etmek ucun ######

############## Internet Gateway ###################
resource "aws_internet_gateway" "igw" {
vpc_id = aws_vpc.development-vpc.id

tags = {
Name: "internet_gateway-anar"
vpc_env: "dev"
}

}

############# Route Table ########################
resource "aws_route_table" "PublicRT" {
vpc_id = aws_vpc.development-vpc.id

route {
cidr_block = "0.0.0.0/0"
gateway_id = aws_internet_gateway.igw.id

}

tags = {
Name: "route"
vpc_env: "dev"

}

}

########### Create Security Group for Firewall Configuration #########

###Yalniz bir dene portu icaze vermek ucun AWS-de 22 ci portu 

resource "aws_security_group" "myapp-sg" {
name = "myip-sg"
vpc_id = aws_vpc.development-vpc.id

ingress {
from_port = 22
to_port = 22
protocol = "tcp"
cidr_blocks = ["0.0.0.0/0"]

}

ingress {
from_port = 8080
to_port = 8080
protocol = "tcp"

cidr_blocks = ["0.0.0.0/0"]

}

egress {

```
 from_port = 0
 to_port = 0
 protocol = "-1"
 cidr_blocks = ["0.0.0.0/0"]

```

}

}
